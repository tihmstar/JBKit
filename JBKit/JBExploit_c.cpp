//
//  JBExploit_c.cpp
//  JBKit
//
//  Created by tihmstar on 08.01.24.
//

#include "JBExploit_c.h"
#include "JBExploit.hpp"

#include <string.h>

using namespace JBKit;

#pragma mark get exploit
extern "C"
char **JBExploit_getRegisteredExploitsList(){
    char **retval = NULL;
    std::vector<std::string> list;
    try {
        list = JBExploit::listRegisteredExploits();
    } catch (...) {
        return NULL;
    }
    retval = (char**)calloc(list.size()+1, sizeof(char*));
    {
        char **ri = retval;
        for (auto e : list) {
            *ri++ = strdup(e.c_str());
        }
    }
    return retval;
}

extern "C"
void JBExploit_freeRegisteredExploitsList(char **list){
    for (char **ri = list; *ri; ri++) {
        free(*ri);
    }
    free(list);
}

extern "C"
JBExploit_ctx_t JBExploit_getExploitWithName(const char *name){
    try {
        return (JBExploit_ctx_t)JBExploit::getExploitWithName(name);
    } catch (...) {
        return NULL;
    }
}


#pragma mark use exploit

extern "C"
int JBExploit_exploit_initExploit(JBExploit_ctx_t ctx, JBOffset_ctx_t offsets, readfunc_t func_read, writefunc_t func_write, execfunc_t func_exec){
    JBExploit *obj = (JBExploit *)ctx;
    JBOffsets *obj_offsets = (JBOffsets *)offsets;
    
    try {
        return obj->initExploit(*obj_offsets, func_read, func_write, func_exec) ? 0 : -2;
    } catch (...) {
        return -1;
    }
}

extern "C"
int JBExploit_exploit_cleanupExploit(JBExploit_ctx_t ctx){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        obj->cleanupExploit();
        return 0;
    } catch (...) {
        return -1;
    }
}

extern "C"
int JBExploit_exploit_runExploit(JBExploit_ctx_t ctx){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        obj->runExploit();
        return 0;
    } catch (...) {
        return -1;
    }
}

extern "C"
const char * JBExploit_exploit_exploitName(JBExploit_ctx_t ctx){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->exploitName();
    } catch (...) {
        return NULL;
    }
}

extern "C"
BOOLEAN JBExploit_exploit_hasRead64(JBExploit_ctx_t ctx){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->hasRead64();
    } catch (...) {
        return FALSE;
    }
}

extern "C"
BOOLEAN JBExploit_exploit_hasRead32(JBExploit_ctx_t ctx){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->hasRead32();
    } catch (...) {
        return FALSE;
    }
}

extern "C"
BOOLEAN JBExploit_exploit_hasWrite64(JBExploit_ctx_t ctx){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->hasWrite64();
    } catch (...) {
        return FALSE;
    }
}

extern "C"
BOOLEAN JBExploit_exploit_hasWrite32(JBExploit_ctx_t ctx){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->hasWrite32();
    } catch (...) {
        return FALSE;
    }
}

extern "C"
BOOLEAN JBExploit_exploit_hasExecute(JBExploit_ctx_t ctx){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->hasExecute();
    } catch (...) {
        return FALSE;
    }
}

extern "C"
size_t JBExploit_exploit_unstable_read_generic(JBExploit_ctx_t ctx, kptr_t kaddr, void *dstbuf, size_t size, BOOLEAN honorSizeLimit){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->unstable_read_generic(kaddr, dstbuf, size, honorSizeLimit);
    } catch (...) {
        return 0;
    }
}

extern "C"
size_t JBExploit_exploit_unstable_write_generic(JBExploit_ctx_t ctx, kptr_t kaddr, const void *srcbuf, size_t size, BOOLEAN honorSizeLimit){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->unstable_write_generic(kaddr, srcbuf, size, honorSizeLimit);
    } catch (...) {
        return 0;
    }
}

extern "C"
uint64_t JBExploit_exploit_unstable_read64(JBExploit_ctx_t ctx, kptr_t kaddr){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->unstable_read64(kaddr);
    } catch (...) {
        return 0;
    }
}

extern "C"
uint32_t JBExploit_exploit_unstable_read32(JBExploit_ctx_t ctx, kptr_t kaddr){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->unstable_read32(kaddr);
    } catch (...) {
        return 0;
    }
}

extern "C"
int JBExploit_exploit_unstable_write64(JBExploit_ctx_t ctx, kptr_t kaddr, uint64_t val){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        obj->unstable_write64(kaddr, val);
        return 0;
    } catch (...) {
        return -1;
    }
}

extern "C"
int JBExploit_exploit_unstable_write32(JBExploit_ctx_t ctx, kptr_t kaddr, uint32_t val){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        obj->unstable_write32(kaddr, val);
        return 0;
    } catch (...) {
        return -1;
    }
}

extern "C"
kptr_t JBExploit_exploit_unstable_execute(JBExploit_ctx_t ctx, kptr_t kaddr, callargs_t args){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->unstable_execute(kaddr, args);
    } catch (...) {
        return 0;
    }
}

extern "C"
kptr_t JBExploit_exploit_getKernelBase(JBExploit_ctx_t ctx){
    JBExploit *obj = (JBExploit *)ctx;
    try {
        return obj->getKernelBase();
    } catch (...) {
        return 0;
    }
}
