//
//  JBExploit.cpp
//  JBKit
//
//  Created by tihmstar on 08.01.24.
//

#include "JBExploit.hpp"

using namespace JBKit;

#pragma mark constructor
JBExploit::JBExploit(){
    //
}

JBExploit::~JBExploit(){
    //
}

#pragma mark availability infos
bool JBExploit::hasRead64() noexcept{
    return false;
}

bool JBExploit::hasRead32() noexcept{
    return false;
}

bool JBExploit::hasWrite64() noexcept{
    return false;
}

bool JBExploit::hasWrite32() noexcept{
    return false;
}

bool JBExploit::hasExecute() noexcept{
    return false;
}


#pragma mark public primitives

uint64_t JBExploit::unstable_read64(kptr_t kaddr){
    return 0;
}

uint32_t JBExploit::unstable_read32(kptr_t kaddr){
    return 0;
}

size_t JBExploit::unstable_read_generic(kptr_t kaddr, void *dstbuf, size_t size, bool honorSizeLimit){
    //TODO
    return 0;
}

void JBExploit::unstable_write64(kptr_t kaddr, uint64_t val){
    
}

void JBExploit::unstable_write32(kptr_t kaddr, uint32_t val){
    
}

size_t JBExploit::unstable_write_generic(kptr_t kaddr, const void *srcbuf, size_t size, bool honorSizeLimit){
    //TODO
    return 0;
}

void JBExploit::unstable_execute(kptr_t kaddr, std::vector<kptr_t> args){
    
}
