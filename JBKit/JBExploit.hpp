//
//  JBExploit.hpp
//  JBKit
//
//  Created by tihmstar on 08.01.24.
//

#ifndef JBExploit_hpp
#define JBExploit_hpp
#ifdef __cplusplus

#include <JBKit/JBOffsets.hpp>
#include <JBKit/JBTypes.h>

#include <vector>
#include <iostream>

namespace JBKit {

class JBExploit{
    
public:
    JBExploit();
    virtual ~JBExploit();
    
#pragma mark exploit
    virtual bool init(JBOffsets offsets) = 0;
    virtual void cleanup() = 0;
    virtual void runExploit() = 0;
    
#pragma mark infos
    virtual const char *exploitName() = 0;
    
#pragma mark availability infos
    virtual bool hasRead64() const noexcept;
    virtual bool hasRead32() const noexcept;
    virtual bool hasWrite64() const noexcept;
    virtual bool hasWrite32() const noexcept;
    virtual bool hasExecute() const noexcept;

#pragma mark provide primitives
    /*
        Args:
            honorSizeLimit:
                if false, a larger read may be performed this can be problematic when (potentially) reading past a page boundry which may cause a panic
        Returns: number of bytes read
     */
    virtual size_t unstable_read_generic(kptr_t kaddr, void *dstbuf, size_t size, BOOLEAN honorSizeLimit = false);


    /*
        Args:
            honorSizeLimit:
                if false, a larger write may be performed this can be problematic when (potentially) writing past a page boundry which may cause a panic
        Returns: number of bytes written
     */
    virtual size_t unstable_write_generic(kptr_t kaddr, const void *srcbuf, size_t size, BOOLEAN honorSizeLimit = false);
    
#pragma mark primitives
    virtual uint64_t unstable_read64(kptr_t kaddr);
    virtual uint32_t unstable_read32(kptr_t kaddr);

    virtual void unstable_write64(kptr_t kaddr, uint64_t val);
    virtual void unstable_write32(kptr_t kaddr, uint32_t val);

    virtual kptr_t unstable_execute(kptr_t kaddr, callargs_t args = {});
    
#pragma mark static
    static void registerExploit(JBExploit *exp) noexcept;
    static JBExploit *getExploitWithName(const char *name) noexcept;
    static std::vector<std::string> listRegisteredExploits() noexcept;
};

}

#endif // __cplusplus
#endif /* JBExploit_hpp */
